# ==========================================
# Fastify OAuth API - Production Environment
# ==========================================
# Use this template for production deployments
# DO NOT commit actual secrets to version control!

# ==========================================
# APPLICATION
# ==========================================
NODE_ENV=production
PORT=1337
HOST=0.0.0.0
API_VERSION=v1

# Node.js memory limit (for Raspberry Pi 4B with SSD)
# Uncomment and adjust based on available RAM
# NODE_OPTIONS=--max-old-space-size=512

# ==========================================
# DOCKER CONFIGURATION
# ==========================================
# Container names
CONTAINER_POSTGRES_NAME=fastify-oauth-postgres
CONTAINER_REDIS_NAME=fastify-oauth-redis
CONTAINER_API_NAME=fastify-oauth-api
CONTAINER_CADDY_NAME=fastify-oauth-caddy

# Docker network
DOCKER_NETWORK_NAME=api-network

# Docker versions (pinned for production stability)
POSTGRES_VERSION=15-alpine
REDIS_VERSION=7-alpine
NODE_VERSION=22-alpine
CADDY_VERSION=2-alpine

# Build target
BUILD_TARGET=production

# ==========================================
# DATABASE (PostgreSQL)
# ==========================================
DATABASE_HOST=postgres
DATABASE_PORT=5432
DATABASE_USER=postgres
# CRITICAL: Generate strong password (min 32 chars)
# Use: openssl rand -base64 32
DATABASE_PASSWORD=CHANGE_ME_GENERATE_STRONG_PASSWORD_MIN_32_CHARS
DATABASE_NAME=fastify_oauth_db

# SSL settings (REQUIRED for production)
DATABASE_SSL=true

# Connection pool (optimized for production load)
DATABASE_POOL_MIN=2
DATABASE_POOL_MAX=10

# ==========================================
# REDIS
# ==========================================
REDIS_HOST=redis
REDIS_PORT=6379
# CRITICAL: Set Redis password for production!
# Use: openssl rand -base64 32
REDIS_PASSWORD=CHANGE_ME_GENERATE_STRONG_PASSWORD_MIN_32_CHARS
REDIS_DB=0
REDIS_KEY_PREFIX=fastify:

# TTL settings (in seconds)
REDIS_CACHE_TTL=300
REDIS_SESSION_TTL=3600

# ==========================================
# JWT CONFIGURATION
# ==========================================
# CRITICAL: Generate a strong random secret for production!
# Use: openssl rand -base64 64
JWT_SECRET=CHANGE_ME_GENERATE_STRONG_SECRET_MIN_64_CHARS

# Token expiration (production-optimized)
JWT_ACCESS_TOKEN_EXPIRES_IN=15m
JWT_REFRESH_TOKEN_EXPIRES_IN=7d

# Issuer and audience (set to your domain)
JWT_ISSUER=https://yourdomain.com
JWT_AUDIENCE=https://yourdomain.com

# Algorithm
JWT_ALGORITHM=HS256

# ==========================================
# ADMIN CONFIGURATION
# ==========================================
# Primary admin email (auto-promoted on OAuth login)
ADMIN_EMAIL=admin@yourdomain.com

# Additional admin emails (comma-separated)
ADMIN_EMAILS_ADDITIONAL=

# Super Admin email (auto-promoted to superadmin role on first OAuth login)
# CRITICAL: Use your personal email for super admin access
SUPER_ADMIN_EMAIL=superadmin@yourdomain.com

# ==========================================
# API KEYS (Admin Panel)
# ==========================================
# CRITICAL: Generate initial key with: npm run db:seed:superadmin
# Store in secure secret manager (e.g., AWS Secrets Manager, HashiCorp Vault)
# NEVER commit actual keys to version control!

# Admin panel API key (used by Vite frontend - VITE_ prefix required)
# NOTE: VITE_ prefix makes it available to frontend, but only VITE_ vars are exposed to browser.
VITE_ADMIN_PANEL_API_KEY=GENERATE_WITH_SEED_SCRIPT_THEN_MOVE_TO_SECRET_MANAGER

# NOTE: Mobile app API keys (iOS/Android) are managed through the admin panel
# and stored in the database. 1 active key per platform is allowed.

# ==========================================
# GOOGLE OAUTH (PRODUCTION)
# ==========================================
# Get credentials from: https://console.cloud.google.com/apis/credentials
# CRITICAL: Use PRODUCTION OAuth credentials (not development)

# Admin Panel OAuth (Web Application)
# Create: OAuth 2.0 Client ID → Web application
# Authorized redirect URI: https://yourdomain.com/api/auth/admin/google/callback
GOOGLE_CLIENT_ID_ADMIN=your-production-web-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET_ADMIN=your-production-web-client-secret
GOOGLE_REDIRECT_URI_ADMIN=https://yourdomain.com/api/auth/admin/google/callback

# Mobile App OAuth (iOS Application)
# Create: OAuth 2.0 Client ID → iOS → Bundle ID: com.yourcompany.yourapp
# Authorized redirect URI: https://yourdomain.com/api/auth/google/mobile
GOOGLE_CLIENT_ID_IOS=your-production-ios-client-id.apps.googleusercontent.com
GOOGLE_REDIRECT_URI_MOBILE=https://yourdomain.com/api/auth/google/mobile

# Mobile App OAuth (Android Application)
# Create: OAuth 2.0 Client ID → Android → Package name + SHA-1 certificate fingerprint
# Authorized redirect URI: https://yourdomain.com/api/auth/google/mobile
GOOGLE_CLIENT_ID_ANDROID=your-production-android-client-id.apps.googleusercontent.com
GOOGLE_REDIRECT_URI_ANDROID=https://yourdomain.com/api/auth/google/mobile

# Scopes (space-separated)
GOOGLE_SCOPES=openid email profile

# ==========================================
# APPLE SIGN-IN (PRODUCTION)
# ==========================================
# Get credentials from: https://developer.apple.com/account/resources/identifiers
# CRITICAL: Use PRODUCTION Apple Sign-In credentials
APPLE_CLIENT_ID=com.yourdomain.yourapp.signin
APPLE_TEAM_ID=YOUR_PRODUCTION_TEAM_ID
APPLE_KEY_ID=YOUR_PRODUCTION_KEY_ID

# Path to Apple private key (.p8 file)
# CRITICAL: Store .p8 file securely, not in version control!
APPLE_PRIVATE_KEY_PATH=./keys/apple-production-private-key.p8

# Redirect URI (MUST match production domain registered in Apple Developer Portal)
APPLE_REDIRECT_URI=https://yourdomain.com/api/auth/apple/callback

# Mobile redirect URI (Universal Links required for production)
APPLE_REDIRECT_URI_MOBILE=https://yourdomain.com/oauth/apple

# Scopes
APPLE_SCOPES=name email

# ==========================================
# CADDY REVERSE PROXY (PRODUCTION)
# ==========================================
# Production domain (MUST be real domain with DNS configured)
CADDY_DOMAIN=yourdomain.com

# Email for Let's Encrypt notifications (CRITICAL: use real email)
CADDY_EMAIL=ssl-admin@yourdomain.com

# ACME CA (PRODUCTION Let's Encrypt)
CADDY_ACME_CA=https://acme-v02.api.letsencrypt.org/directory

# API backend
API_HOST=api
API_PORT=1337

# ==========================================
# LOGGING (PRODUCTION)
# ==========================================
# Log level: warn or error for production (avoid debug/info noise)
LOG_LEVEL=warn

# Pretty print logs (MUST be false for production - JSON format for log aggregation)
LOG_PRETTY_PRINT=false

# ==========================================
# CORS CONFIGURATION (PRODUCTION)
# ==========================================
# Allowed origins (CRITICAL: NEVER use * in production!)
# List all allowed domains (admin panel, mobile apps if applicable)
CORS_ORIGIN=https://yourdomain.com,https://admin.yourdomain.com

# Allowed methods
CORS_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS

# Allow credentials
CORS_CREDENTIALS=true

# ==========================================
# RATE LIMITING (PRODUCTION)
# ==========================================
# Maximum requests per time window (stricter for production)
RATE_LIMIT_MAX=500

# Time window in milliseconds (60000 = 1 minute)
RATE_LIMIT_WINDOW=60000

# Ban duration in milliseconds (optional)
RATE_LIMIT_BAN=300000

# ==========================================
# SESSION CONFIGURATION
# ==========================================
# CRITICAL: Generate strong random secret
# Use: openssl rand -base64 64
SESSION_SECRET=CHANGE_ME_GENERATE_STRONG_SECRET_MIN_64_CHARS
SESSION_COOKIE_NAME=fastify_oauth_session
SESSION_MAX_AGE=604800000

# ==========================================
# SECURITY (PRODUCTION)
# ==========================================
# Enable HTTPS redirect
HTTPS_REDIRECT=true

# Enable HSTS (HTTP Strict Transport Security)
HSTS_ENABLED=true
HSTS_MAX_AGE=31536000

# ==========================================
# SWAGGER DOCUMENTATION (PRODUCTION)
# ==========================================
# Disable or protect Swagger UI in production!
SWAGGER_ENABLED=false

# Swagger route path (if enabled, protect with authentication)
SWAGGER_ROUTE=/documentation

# ==========================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ==========================================
# Before deploying to production, verify ALL items:
#
# SECRETS & CREDENTIALS:
# [ ] Strong JWT_SECRET (min 64 chars random)
# [ ] Strong DATABASE_PASSWORD (min 32 chars random)
# [ ] Strong SESSION_SECRET (min 64 chars random)
# [ ] Strong REDIS_PASSWORD (min 32 chars random)
# [ ] All API keys generated and stored in secret manager
# [ ] Google OAuth PRODUCTION credentials (not dev)
# [ ] Apple Sign-In PRODUCTION credentials (not dev)
# [ ] Apple .p8 file stored securely (not in git)
#
# ENVIRONMENT:
# [ ] NODE_ENV=production
# [ ] LOG_PRETTY_PRINT=false
# [ ] LOG_LEVEL=warn or error
#
# DATABASE:
# [ ] DATABASE_SSL=true
# [ ] Strong DATABASE_PASSWORD
# [ ] Backups configured and tested
# [ ] Connection pooling optimized
#
# SECURITY:
# [ ] HTTPS_REDIRECT=true
# [ ] HSTS_ENABLED=true
# [ ] CORS_ORIGIN with specific domains (NOT *)
# [ ] Rate limiting configured
# [ ] SWAGGER_ENABLED=false (or protected)
#
# DOMAIN & SSL:
# [ ] Real domain in CADDY_DOMAIN with DNS configured
# [ ] Production Let's Encrypt in CADDY_ACME_CA
# [ ] Valid email in CADDY_EMAIL
# [ ] SSL certificate auto-renewal tested
#
# OAUTH:
# [ ] Google OAuth redirect URIs match production domain
# [ ] Apple Sign-In redirect URIs match production domain
# [ ] OAuth credentials tested in production environment
#
# MONITORING:
# [ ] Health check endpoint tested
# [ ] Log aggregation configured (e.g., ELK, CloudWatch)
# [ ] Alerting configured for errors/downtime
# [ ] Performance monitoring (e.g., New Relic, DataDog)
#
# INFRASTRUCTURE:
# [ ] Resource limits configured (RAM, CPU)
# [ ] Auto-restart configured (Docker, PM2, systemd)
# [ ] Firewall rules configured
# [ ] Reverse proxy (Caddy) configured and tested
# [ ] All secrets in secret manager (not .env file!)
#
# TESTING:
# [ ] All tests passing (npm run test:coverage)
# [ ] Load testing performed
# [ ] OAuth flows tested end-to-end
# [ ] API key authentication tested
# [ ] Admin panel accessible and functional
#
# BACKUP & DISASTER RECOVERY:
# [ ] Database backups automated
# [ ] Backup restoration tested
# [ ] Disaster recovery plan documented
# [ ] Rollback procedure tested
